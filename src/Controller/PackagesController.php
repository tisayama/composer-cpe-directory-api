<?php
namespace App\Controller;

use App\Controller\AppController;
use App\Model\Entity\Cve;
use App\Model\Entity\PackagistPackage;
use App\Model\Entity\PackagistVersion;
use App\Model\Entity\PackagistVersionCpeName;
use Cake\Cache\Cache;
use Cake\Network\Exception\NotFoundException;

/**
 * Packages Controller
 *
 * @property \App\Model\Table\PackagistPackagesTable $PackagistPackages
 */
class PackagesController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadModel('PackagistPackages');
        $this->loadComponent('RequestHandler');
    }

    public function package() {

        $this->response->compress();



        $vendorName = $this->request->param('vendor');
        $packageName = $this->request->param('package');

        if ($vendorName && $packageName) {

            if (!$package = Cache::read($vendorName . '/' . $packageName, 'package')) {

                /** @var PackagistPackage $entity */
                $entity = $this->PackagistPackages->find()
                    ->where(['PackagistPackages.name' => $vendorName . '/' . $packageName])
                    ->contain(['PackagistVersions.Cves', 'PackagistVersions.PackagistVersionCpeNames'])
                    ->first();

                if (!$entity) {
                    throw new NotFoundException();
                }

                $package = $this->formatJson($entity);

                Cache::write($vendorName . '/' . $packageName, $package, 'package');
            }

            $this->set(['packages' => $package]);
            $this->set('_serialize', ['package']);

        } else {
            $this->redirect(['controller' => 'pages', 'action' => 'display']);
        }

    }


    private function formatJson(PackagistPackage $packageEntity) {


        $name = $packageEntity->name;
        $packages[$name] = [];

        /** @var PackagistVersion $versionEntity */
        foreach ($packageEntity->packagist_versions as $versionEntity) {

            $version = [];

            $version['name'] = $name;
            $version['version'] = $versionEntity->name;
            $version['cpes'] = [];

            /** @var PackagistVersionCpeName $cpeNameEntity */
            foreach ($versionEntity->packagist_version_cpe_names as $cpeNameEntity) {

                $cpeName = [];
                $cpeName['cpe_2.2'] = $cpeNameEntity->cpe_name;
                $cpeName['cpe_2.3'] = $cpeNameEntity->cpe_v23_name;

                $version['cpes'][] = $cpeName;
            }

            $version['cves'] = [];

            /** @var Cve $cveEntity */
            foreach ($versionEntity->cves as $cveEntity) {

                $cve = [];
                $cve['name'] = $cveEntity->cve_name;

                $cve['summary'] = $cveEntity->summary;

                $cve['cvss_v2_score'] = $cveEntity->cvss_v2_score;
                $cve['cvss_v2_source'] = $cveEntity->cvss_v2_source;

                $version["cves"][] = $cve;

            }

            $packages[$name][$versionEntity->name] = $version;

        }


        return $packages;


    }


}
